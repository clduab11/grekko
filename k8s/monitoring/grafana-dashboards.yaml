# Grafana Dashboards and Configuration for Trading System
# Comprehensive visualization and alerting dashboards

apiVersion: v1
kind: ConfigMap
metadata:
  name: grafana-config
  namespace: monitoring
data:
  grafana.ini: |
    [analytics]
    check_for_updates = true
    
    [grafana_net]
    url = https://grafana.net
    
    [log]
    mode = console
    level = info
    
    [paths]
    data = /var/lib/grafana/data
    logs = /var/log/grafana
    plugins = /var/lib/grafana/plugins
    provisioning = /etc/grafana/provisioning
    
    [server]
    protocol = http
    http_port = 3000
    domain = localhost
    enforce_domain = false
    root_url = %(protocol)s://%(domain)s:%(http_port)s/
    serve_from_sub_path = false
    
    [database]
    type = sqlite3
    host = 127.0.0.1:3306
    name = grafana
    user = root
    password =
    url =
    ssl_mode = disable
    path = grafana.db
    max_idle_conn = 2
    max_open_conn =
    conn_max_lifetime = 14400
    log_queries =
    
    [session]
    provider = file
    provider_config = sessions
    cookie_name = grafana_sess
    cookie_secure = false
    session_life_time = 86400
    
    [dataproxy]
    logging = false
    timeout = 30
    send_user_header = false
    
    [security]
    admin_user = admin
    admin_password = $__env{GRAFANA_ADMIN_PASSWORD}
    secret_key = SW2YcwTIb9zpOOhoPsMm
    login_remember_days = 7
    cookie_username = grafana_user
    cookie_remember_name = grafana_remember
    disable_gravatar = false
    data_source_proxy_whitelist =
    disable_brute_force_login_protection = false
    
    [snapshots]
    external_enabled = true
    external_snapshot_url = https://snapshots-origin.raintank.io
    external_snapshot_name = Publish to snapshot.raintank.io
    snapshot_remove_expired = true
    
    [dashboards]
    versions_to_keep = 20
    
    [users]
    allow_sign_up = false
    allow_org_create = false
    auto_assign_org = true
    auto_assign_org_id = 1
    auto_assign_org_role = Viewer
    verify_email_enabled = false
    login_hint = email or username
    default_theme = dark
    
    [auth]
    login_cookie_name = grafana_session
    login_maximum_inactive_lifetime_duration =
    login_maximum_lifetime_duration =
    token_rotation_interval_minutes = 10
    disable_login_form = false
    disable_signout_menu = false
    signout_redirect_url =
    oauth_auto_login = false
    
    [auth.anonymous]
    enabled = false
    org_name = Main Org.
    org_role = Viewer
    hide_version = false
    
    [smtp]
    enabled = false
    host = localhost:587
    user =
    password =
    cert_file =
    key_file =
    skip_verify = false
    from_address = admin@grafana.localhost
    from_name = Grafana
    ehlo_identity = dashboard.example.com
    
    [emails]
    welcome_email_on_sign_up = false
    templates_pattern = emails/*.html
    
    [alerting]
    enabled = true
    execute_alerts = true
    error_or_timeout = alerting
    nodata_or_nullvalues = no_data
    concurrent_render_limit = 5
    evaluation_timeout_seconds = 30
    notification_timeout_seconds = 30
    max_attempts = 3
    min_interval_seconds = 1
    
    [explore]
    enabled = true
    
    [metrics]
    enabled = true
    interval_seconds = 10
    
    [tracing.jaeger]
    address = jaeger-query.monitoring.svc.cluster.local:16686
    always_included_tag = true
    sampler_type = const
    sampler_param = 1
    
    [external_image_storage]
    provider =
    
    [external_image_storage.s3]
    bucket =
    region =
    path =
    access_key =
    secret_key =
    
    [rendering]
    server_url =
    callback_url =
    concurrent_render_request_limit = 30
    
    [panels]
    enable_alpha = false
    disable_sanitize_html = false
    
    [plugins]
    enable_alpha = false
    app_tls_skip_verify_insecure = false
    
    [enterprise]
    license_path =
    
    [feature_toggles]
    enable = 
    
    [date_formats]
    full_date = MMM Do, YYYY
    interval_second = HH:mm:ss
    interval_minute = HH:mm
    interval_hour = MM/DD HH:mm
    interval_day = MM/DD
    interval_month = YYYY-MM
    interval_year = YYYY
    use_browser_locale = false
    default_timezone = browser
---
# Grafana Provisioning - Datasources
apiVersion: v1
kind: ConfigMap
metadata:
  name: grafana-datasources
  namespace: monitoring
data:
  datasources.yaml: |
    apiVersion: 1
    
    datasources:
    - name: Prometheus
      type: prometheus
      access: proxy
      url: http://prometheus.monitoring.svc.cluster.local:9090
      isDefault: true
      editable: true
      jsonData:
        timeInterval: 15s
        queryTimeout: 60s
        httpMethod: POST
    
    - name: InfluxDB
      type: influxdb
      access: proxy
      url: http://influxdb.trading-prod.svc.cluster.local:8086
      database: trading
      user: $__env{INFLUXDB_USER}
      secureJsonData:
        password: $__env{INFLUXDB_PASSWORD}
      jsonData:
        timeInterval: 10s
        httpMode: GET
    
    - name: Jaeger
      type: jaeger
      access: proxy
      url: http://jaeger-query.monitoring.svc.cluster.local:16686
      editable: true
      jsonData:
        tracesToLogs:
          datasourceUid: 'loki'
          tags: ['job', 'instance', 'pod', 'namespace']
          mappedTags: [{ key: 'service.name', value: 'service' }]
          mapTagNamesEnabled: false
          spanStartTimeShift: '1h'
          spanEndTimeShift: '1h'
          filterByTraceID: false
          filterBySpanID: false
    
    - name: Loki
      type: loki
      access: proxy
      url: http://loki.monitoring.svc.cluster.local:3100
      editable: true
      jsonData:
        maxLines: 1000
        derivedFields:
          - datasourceUid: 'jaeger'
            matcherRegex: "traceID=(\\w+)"
            name: TraceID
            url: '$${__value.raw}'
---
# Grafana Provisioning - Dashboards
apiVersion: v1
kind: ConfigMap
metadata:
  name: grafana-dashboard-providers
  namespace: monitoring
data:
  dashboards.yaml: |
    apiVersion: 1
    
    providers:
    - name: 'trading-system'
      orgId: 1
      folder: 'Trading System'
      type: file
      disableDeletion: false
      updateIntervalSeconds: 10
      allowUiUpdates: true
      options:
        path: /var/lib/grafana/dashboards/trading-system
    
    - name: 'infrastructure'
      orgId: 1
      folder: 'Infrastructure'
      type: file
      disableDeletion: false
      updateIntervalSeconds: 10
      allowUiUpdates: true
      options:
        path: /var/lib/grafana/dashboards/infrastructure
    
    - name: 'kubernetes'
      orgId: 1
      folder: 'Kubernetes'
      type: file
      disableDeletion: false
      updateIntervalSeconds: 10
      allowUiUpdates: true
      options:
        path: /var/lib/grafana/dashboards/kubernetes
    
    - name: 'metamask-integration'
      orgId: 1
      folder: 'Metamask Integration'
      type: file
      disableDeletion: false
      updateIntervalSeconds: 10
      allowUiUpdates: true
      options:
        path: /var/lib/grafana/dashboards/metamask-integration
---
# Trading System Overview Dashboard
apiVersion: v1
kind: ConfigMap
metadata:
  name: trading-overview-dashboard
  namespace: monitoring
data:
  trading-overview.json: |
    {
      "dashboard": {
        "id": null,
        "title": "Trading System Overview",
        "tags": ["trading", "overview"],
        "style": "dark",
        "timezone": "browser",
        "panels": [
          {
            "id": 1,
            "title": "Order Execution Rate",
            "type": "stat",
            "targets": [
              {
                "expr": "rate(trading_orders_executed_total[5m])",
                "legendFormat": "Orders/sec"
              }
            ],
            "fieldConfig": {
              "defaults": {
                "color": {
                  "mode": "thresholds"
                },
                "thresholds": {
                  "steps": [
                    {"color": "green", "value": null},
                    {"color": "yellow", "value": 50},
                    {"color": "red", "value": 100}
                  ]
                },
                "unit": "ops"
              }
            },
            "gridPos": {"h": 8, "w": 6, "x": 0, "y": 0}
          },
          {
            "id": 2,
            "title": "P&L Real-time",
            "type": "stat",
            "targets": [
              {
                "expr": "trading_pnl_total",
                "legendFormat": "Total P&L"
              }
            ],
            "fieldConfig": {
              "defaults": {
                "color": {
                  "mode": "thresholds"
                },
                "thresholds": {
                  "steps": [
                    {"color": "red", "value": null},
                    {"color": "yellow", "value": 0},
                    {"color": "green", "value": 1000}
                  ]
                },
                "unit": "currencyUSD"
              }
            },
            "gridPos": {"h": 8, "w": 6, "x": 6, "y": 0}
          },
          {
            "id": 3,
            "title": "Active Positions",
            "type": "stat",
            "targets": [
              {
                "expr": "trading_positions_active",
                "legendFormat": "Active Positions"
              }
            ],
            "fieldConfig": {
              "defaults": {
                "color": {
                  "mode": "palette-classic"
                },
                "unit": "short"
              }
            },
            "gridPos": {"h": 8, "w": 6, "x": 12, "y": 0}
          },
          {
            "id": 4,
            "title": "System Health",
            "type": "stat",
            "targets": [
              {
                "expr": "up{job=\"trading-services\"}",
                "legendFormat": "{{kubernetes_pod_name}}"
              }
            ],
            "fieldConfig": {
              "defaults": {
                "color": {
                  "mode": "thresholds"
                },
                "thresholds": {
                  "steps": [
                    {"color": "red", "value": null},
                    {"color": "green", "value": 1}
                  ]
                },
                "mappings": [
                  {"options": {"0": {"text": "DOWN"}}, "type": "value"},
                  {"options": {"1": {"text": "UP"}}, "type": "value"}
                ]
              }
            },
            "gridPos": {"h": 8, "w": 6, "x": 18, "y": 0}
          },
          {
            "id": 5,
            "title": "Order Execution Latency",
            "type": "timeseries",
            "targets": [
              {
                "expr": "histogram_quantile(0.50, trading_order_execution_duration_seconds_bucket)",
                "legendFormat": "50th percentile"
              },
              {
                "expr": "histogram_quantile(0.95, trading_order_execution_duration_seconds_bucket)",
                "legendFormat": "95th percentile"
              },
              {
                "expr": "histogram_quantile(0.99, trading_order_execution_duration_seconds_bucket)",
                "legendFormat": "99th percentile"
              }
            ],
            "fieldConfig": {
              "defaults": {
                "color": {
                  "mode": "palette-classic"
                },
                "unit": "s"
              }
            },
            "gridPos": {"h": 8, "w": 12, "x": 0, "y": 8}
          },
          {
            "id": 6,
            "title": "Error Rate",
            "type": "timeseries",
            "targets": [
              {
                "expr": "rate(trading_errors_total[5m])",
                "legendFormat": "{{error_type}}"
              }
            ],
            "fieldConfig": {
              "defaults": {
                "color": {
                  "mode": "palette-classic"
                },
                "unit": "ops"
              }
            },
            "gridPos": {"h": 8, "w": 12, "x": 12, "y": 8}
          }
        ],
        "time": {
          "from": "now-1h",
          "to": "now"
        },
        "refresh": "5s"
      }
    }
---
# Metamask Integration Dashboard
apiVersion: v1
kind: ConfigMap
metadata:
 name: metamask-integration-dashboard
 namespace: monitoring
data:
 metamask-overview.json: |
   {
     "dashboard": {
       "id": null,
       "uid": "metamask-integration-overview",
       "title": "Metamask Integration Overview",
       "tags": ["metamask", "integration", "overview"],
       "style": "dark",
       "timezone": "browser",
       "editable": true,
       "panels": [
         {
           "id": 1,
           "title": "Metamask Service Health",
           "type": "stat",
           "targets": [
             {
               "expr": "up{job=\"metamask-integration-service\"}",
               "legendFormat": "{{kubernetes_pod_name}}"
             }
           ],
           "fieldConfig": {
             "defaults": {
               "color": {"mode": "thresholds"},
               "thresholds": {"steps": [{"color": "red", "value": null}, {"color": "green", "value": 1}]},
               "mappings": [
                 {"options": {"0": {"text": "DOWN"}}, "type": "value"},
                 {"options": {"1": {"text": "UP"}}, "type": "value"}
               ]
             }
           },
           "gridPos": {"h": 6, "w": 8, "x": 0, "y": 0}
         },
         {
           "id": 2,
           "title": "Authentication Failure Rate",
           "type": "timeseries",
           "targets": [
             {
               "expr": "sum(rate(metamask_auth_failures_total[5m])) by (kubernetes_pod_name)",
               "legendFormat": "{{kubernetes_pod_name}}"
             }
           ],
           "fieldConfig": {"defaults": {"unit": "short", "color": {"mode": "palette-classic"}}},
           "gridPos": {"h": 8, "w": 8, "x": 8, "y": 0}
         },
         {
           "id": 3,
           "title": "API Latency P95",
           "type": "timeseries",
           "targets": [
             {
               "expr": "histogram_quantile(0.95, sum(rate(metamask_api_request_duration_seconds_bucket[5m])) by (le, kubernetes_pod_name, endpoint))",
               "legendFormat": "{{endpoint}} - {{kubernetes_pod_name}}"
             }
           ],
           "fieldConfig": {"defaults": {"unit": "s", "color": {"mode": "palette-classic"}}},
           "gridPos": {"h": 8, "w": 8, "x": 16, "y": 0}
         },
         {
           "id": 4,
           "title": "API Error Rate (%)",
           "type": "timeseries",
           "targets": [
             {
               "expr": "sum(rate(metamask_api_requests_failed_total[5m])) by (kubernetes_pod_name, endpoint) / sum(rate(metamask_api_requests_total[5m])) by (kubernetes_pod_name, endpoint) * 100",
               "legendFormat": "{{endpoint}} - {{kubernetes_pod_name}}"
             }
           ],
           "fieldConfig": {"defaults": {"unit": "percent", "color": {"mode": "palette-classic"}, "min": 0, "max": 100}},
           "gridPos": {"h": 8, "w": 8, "x": 0, "y": 8}
         },
         {
           "id": 5,
           "title": "Wallet Connection Success Rate (%)",
           "type": "timeseries",
           "targets": [
             {
               "expr": "(1 - sum(rate(metamask_wallet_connection_failed_total[10m])) by (kubernetes_pod_name) / sum(rate(metamask_wallet_connection_attempts_total[10m])) by (kubernetes_pod_name)) * 100",
               "legendFormat": "{{kubernetes_pod_name}}"
             }
           ],
           "fieldConfig": {"defaults": {"unit": "percent", "color": {"mode": "palette-classic"}, "min": 0, "max": 100}},
           "gridPos": {"h": 8, "w": 8, "x": 8, "y": 8}
         },
         {
           "id": 6,
           "title": "Transaction Completion Rate (%)",
           "type": "timeseries",
           "targets": [
             {
               "expr": "(1 - sum(rate(metamask_transaction_failed_total[10m])) by (kubernetes_pod_name) / sum(rate(metamask_transaction_attempts_total[10m])) by (kubernetes_pod_name)) * 100",
               "legendFormat": "{{kubernetes_pod_name}}"
             }
           ],
           "fieldConfig": {"defaults": {"unit": "percent", "color": {"mode": "palette-classic"}, "min": 0, "max": 100}},
           "gridPos": {"h": 8, "w": 8, "x": 16, "y": 8}
         },
         {
           "id": 7,
           "title": "Suspicious Transactions Detected",
           "type": "timeseries",
           "targets": [
             {
               "expr": "sum(rate(metamask_suspicious_transactions_detected_total[10m])) by (kubernetes_pod_name)",
               "legendFormat": "{{kubernetes_pod_name}}"
             }
           ],
           "fieldConfig": {"defaults": {"unit": "short", "color": {"mode": "palette-classic"}}},
           "gridPos": {"h": 8, "w": 8, "x": 0, "y": 16}
         },
         {
           "id": 8,
           "title": "RPC Connection Errors",
           "type": "timeseries",
           "targets": [
             {
               "expr": "sum(rate(metamask_rpc_connection_errors_total[5m])) by (kubernetes_pod_name)",
               "legendFormat": "{{kubernetes_pod_name}}"
             }
           ],
           "fieldConfig": {"defaults": {"unit": "short", "color": {"mode": "palette-classic"}}},
           "gridPos": {"h": 8, "w": 8, "x": 8, "y": 16}
         },
         {
           "id": 9,
           "title": "Kafka Processing Latency P99",
           "type": "timeseries",
           "targets": [
             {
               "expr": "histogram_quantile(0.99, sum(rate(metamask_kafka_message_processing_duration_seconds_bucket[5m])) by (le, kubernetes_pod_name, topic))",
               "legendFormat": "{{topic}} - {{kubernetes_pod_name}}"
             }
           ],
           "fieldConfig": {"defaults": {"unit": "s", "color": {"mode": "palette-classic"}}},
           "gridPos": {"h": 8, "w": 8, "x": 16, "y": 16}
         },
         {
           "id": 10,
           "title": "Active WebSocket Connections",
           "type": "stat",
           "targets": [
             {
               "expr": "sum(metamask_websocket_active_connections) by (kubernetes_pod_name)",
               "legendFormat": "{{kubernetes_pod_name}}"
             }
           ],
           "fieldConfig": {"defaults": {"unit": "short", "color": {"mode": "palette-classic"}}},
           "gridPos": {"h": 6, "w": 6, "x": 0, "y": 24}
         },
         {
           "id": 11,
           "title": "WebSocket Errors",
           "type": "timeseries",
           "targets": [
             {
               "expr": "sum(rate(metamask_websocket_errors_total[5m])) by (kubernetes_pod_name, error_type)",
               "legendFormat": "{{error_type}} - {{kubernetes_pod_name}}"
             }
           ],
           "fieldConfig": {"defaults": {"unit": "short", "color": {"mode": "palette-classic"}}},
           "gridPos": {"h": 6, "w": 6, "x": 6, "y": 24}
         },
         {
           "id": 12,
           "title": "WebSocket Message Throughput",
           "type": "timeseries",
           "targets": [
             {
               "expr": "sum(rate(metamask_websocket_message_throughput_total[1m])) by (kubernetes_pod_name, direction)",
               "legendFormat": "{{direction}} - {{kubernetes_pod_name}}"
             }
           ],
           "fieldConfig": {"defaults": {"unit": "cps", "color": {"mode": "palette-classic"}}},
           "gridPos": {"h": 6, "w": 6, "x": 12, "y": 24}
         },
         {
           "id": 13,
           "title": "Browser Automation Success Rate (%)",
           "type": "stat",
           "targets": [
             {
               "expr": "(sum(rate(metamask_browser_automation_duration_seconds_count{status='success'}[5m])) by (kubernetes_pod_name, operation) / sum(rate(metamask_browser_automation_duration_seconds_count[5m])) by (kubernetes_pod_name, operation)) * 100",
               "legendFormat": "{{operation}} - {{kubernetes_pod_name}}"
             }
           ],
           "fieldConfig": {"defaults": {"unit": "percent", "color": {"mode": "thresholds"}, "thresholds": {"mode": "absolute", "steps": [{"color": "red", "value": 80}, {"color": "orange", "value": 90},{"color": "green", "value": 95}]}, "min": 0, "max": 100}},
           "gridPos": {"h": 6, "w": 6, "x": 18, "y": 24}
         },
         {
           "id": 14,
           "title": "Kafka Consumer Lag",
           "type": "timeseries",
           "targets": [
             {
               "expr": "sum(metamask_kafka_consumer_lag) by (kubernetes_pod_name, topic, partition)",
               "legendFormat": "{{topic}} - P{{partition}} - {{kubernetes_pod_name}}"
             }
           ],
           "fieldConfig": {"defaults": {"unit": "short", "color": {"mode": "palette-classic"}}},
           "gridPos": {"h": 8, "w": 12, "x": 0, "y": 30}
         },
         {
           "id": 15,
           "title": "Metamask Pod CPU Usage (%)",
           "type": "timeseries",
           "targets": [
             {
               "expr": "sum(rate(container_cpu_usage_seconds_total{job=\"metamask-integration-service\", container!=\"\"}[5m])) by (kubernetes_pod_name) * 100",
               "legendFormat": "{{kubernetes_pod_name}}"
             }
           ],
           "fieldConfig": {"defaults": {"unit": "percent", "color": {"mode": "palette-classic"}, "min": 0, "max": 100}},
           "gridPos": {"h": 8, "w": 6, "x": 12, "y": 30}
         },
         {
           "id": 16,
           "title": "Metamask Pod Memory Usage (MiB)",
           "type": "timeseries",
           "targets": [
             {
               "expr": "sum(container_memory_working_set_bytes{job=\"metamask-integration-service\", container!=\"\"}) by (kubernetes_pod_name) / (1024*1024)",
               "legendFormat": "{{kubernetes_pod_name}}"
             }
           ],
           "fieldConfig": {"defaults": {"unit": "MiB", "color": {"mode": "palette-classic"}}},
           "gridPos": {"h": 8, "w": 6, "x": 18, "y": 30}
         }
       ],
       "time": {"from": "now-1h", "to": "now"},
       "refresh": "15s",
       "schemaVersion": 36,
       "version": 1
     }
   }
---
# Grafana Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: grafana
  namespace: monitoring
spec:
  replicas: 1
  selector:
    matchLabels:
      app: grafana
  template:
    metadata:
      labels:
        app: grafana
        app.kubernetes.io/part-of: monitoring-system
        tier: monitoring
    spec:
      serviceAccountName: grafana-service-account
      securityContext:
        fsGroup: 472
        runAsUser: 472
      containers:
      - name: grafana
        image: grafana/grafana:10.0.0
        ports:
        - containerPort: 3000
          name: http
        env:
        - name: GRAFANA_ADMIN_PASSWORD
          valueFrom:
            secretKeyRef:
              name: grafana-credentials
              key: admin-password
        - name: INFLUXDB_USER
          valueFrom:
            secretKeyRef:
              name: influxdb-credentials
              key: username
        - name: INFLUXDB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: influxdb-credentials
              key: password
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
          limits:
            memory: "1Gi"
            cpu: "500m"
        volumeMounts:
        - name: grafana-config
          mountPath: /etc/grafana
        - name: grafana-datasources
          mountPath: /etc/grafana/provisioning/datasources
        - name: grafana-dashboard-providers
          mountPath: /etc/grafana/provisioning/dashboards
        - name: trading-overview-dashboard
          mountPath: /var/lib/grafana/dashboards/trading-system
        - name: metamask-integration-dashboard # New mount for Metamask dashboard
          mountPath: /var/lib/grafana/dashboards/metamask-integration # Path defined in provider
        - name: grafana-storage
          mountPath: /var/lib/grafana
        livenessProbe:
          httpGet:
            path: /api/health
            port: 3000
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /api/health
            port: 3000
          initialDelaySeconds: 5
          periodSeconds: 5
      volumes:
      - name: grafana-config
        configMap:
          name: grafana-config
      - name: grafana-datasources
        configMap:
          name: grafana-datasources
      - name: grafana-dashboard-providers
        configMap:
          name: grafana-dashboard-providers
      - name: trading-overview-dashboard
        configMap:
          name: trading-overview-dashboard
      - name: metamask-integration-dashboard # New volume for Metamask dashboard
        configMap:
          name: metamask-integration-dashboard
      - name: grafana-storage
        persistentVolumeClaim:
          claimName: grafana-storage-pvc
---
# Grafana Service
apiVersion: v1
kind: Service
metadata:
  name: grafana
  namespace: monitoring
  labels:
    app: grafana
spec:
  type: ClusterIP
  ports:
  - port: 3000
    targetPort: 3000
    name: http
  selector:
    app: grafana
---
# Grafana Storage PVC
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: grafana-storage-pvc
  namespace: monitoring
spec:
  accessModes:
  - ReadWriteOnce
  storageClassName: standard
  resources:
    requests:
      storage: 10Gi
---
# Grafana Service Account
apiVersion: v1
kind: ServiceAccount
metadata:
  name: grafana-service-account
  namespace: monitoring
  labels:
    app: grafana
---
# Jaeger Tracing Stack
apiVersion: apps/v1
kind: Deployment
metadata:
  name: jaeger-all-in-one
  namespace: monitoring
spec:
  replicas: 1
  selector:
    matchLabels:
      app: jaeger
      component: all-in-one
  template:
    metadata:
      labels:
        app: jaeger
        component: all-in-one
        app.kubernetes.io/part-of: monitoring-system
        tier: tracing
    spec:
      containers:
      - name: jaeger
        image: jaegertracing/all-in-one:1.47
        ports:
        - containerPort: 16686
          name: query
        - containerPort: 14268
          name: collector
        - containerPort: 14250
          name: grpc
        - containerPort: 6831
          name: agent-compact
          protocol: UDP
        - containerPort: 6832
          name: agent-binary
          protocol: UDP
        - containerPort: 5778
          name: agent-config
        env:
        - name: COLLECTOR_ZIPKIN_HOST_PORT
          value: ":9411"
        - name: COLLECTOR_OTLP_ENABLED
          value: "true"
        - name: SPAN_STORAGE_TYPE
          value: "memory"
        - name: JAEGER_DISABLED
          value: "false"
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
          limits:
            memory: "1Gi"
            cpu: "500m"
        livenessProbe:
          httpGet:
            path: /
            port: 16686
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /
            port: 16686
          initialDelaySeconds: 5
          periodSeconds: 5
---
# Jaeger Query Service
apiVersion: v1
kind: Service
metadata:
  name: jaeger-query
  namespace: monitoring
  labels:
    app: jaeger
    component: query
spec:
  type: ClusterIP
  ports:
  - port: 16686
    targetPort: 16686
    name: query
  selector:
    app: jaeger
    component: all-in-one
---
# Jaeger Collector Service
apiVersion: v1
kind: Service
metadata:
  name: jaeger-collector
  namespace: monitoring
  labels:
    app: jaeger
    component: collector
spec:
  type: ClusterIP
  ports:
  - port: 14268
    targetPort: 14268
    name: collector
  - port: 14250
    targetPort: 14250
    name: grpc
  - port: 9411
    targetPort: 9411
    name: zipkin
  selector:
    app: jaeger
    component: all-in-one
---
# Jaeger Agent Service
apiVersion: v1
kind: Service
metadata:
  name: jaeger-agent
  namespace: monitoring
  labels:
    app: jaeger
    component: agent
spec:
  type: ClusterIP
  ports:
  - port: 6831
    targetPort: 6831
    name: agent-compact
    protocol: UDP
  - port: 6832
    targetPort: 6832
    name: agent-binary
    protocol: UDP
  - port: 5778
    targetPort: 5778
    name: agent-config
  selector:
    app: jaeger
    component: all-in-one
---
# Loki for Log Aggregation
apiVersion: v1
kind: ConfigMap
metadata:
  name: loki-config
  namespace: monitoring
data:
  loki.yaml: |
    auth_enabled: false
    
    server:
      http_listen_port: 3100
      grpc_listen_port: 9096
    
    common:
      path_prefix: /loki
      storage:
        filesystem:
          chunks_directory: /loki/chunks
          rules_directory: /loki/rules
      replication_factor: 1
      ring:
        instance_addr: 127.0.0.1
        kvstore:
          store: inmemory
    
    query_range:
      results_cache:
        cache:
          embedded_cache:
            enabled: true
            max_size_mb: 100
    
    schema_config:
      configs:
        - from: 2020-10-24
          store: boltdb-shipper
          object_store: filesystem
          schema: v11
          index:
            prefix: index_
            period: 24h
    
    ruler:
      alertmanager_url: http://alertmanager.monitoring.svc.cluster.local:9093
    
    limits_config:
      enforce_metric_name: false
      reject_old_samples: true
      reject_old_samples_max_age: 168h
      ingestion_rate_mb: 16
      ingestion_burst_size_mb: 32
---
# Loki Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: loki
  namespace: monitoring
spec:
  replicas: 1
  selector:
    matchLabels:
      app: loki
  template:
    metadata:
      labels:
        app: loki
        app.kubernetes.io/part-of: monitoring-system
        tier: logging
    spec:
      containers:
      - name: loki
        image: grafana/loki:2.8.0
        ports:
        - containerPort: 3100
          name: http
        - containerPort: 9096
          name: grpc
        args:
        - -config.file=/etc/loki/loki.yaml
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
          limits:
            memory: "1Gi"
            cpu: "500m"
        volumeMounts:
        - name: loki-config
          mountPath: /etc/loki
        - name: loki-storage
          mountPath: /loki
        livenessProbe:
          httpGet:
            path: /ready
            port: 3100
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /ready
            port: 3100
          initialDelaySeconds: 5
          periodSeconds: 5
      volumes:
      - name: loki-config
        configMap:
          name: loki-config
      - name: loki-storage
        persistentVolumeClaim:
          claimName: loki-storage-pvc
---
# Loki Service
apiVersion: v1
kind: Service
metadata:
  name: loki
  namespace: monitoring
  labels:
    app: loki
spec:
  type: ClusterIP
  ports:
  - port: 3100
    targetPort: 3100
    name: http
  - port: 9096
    targetPort: 9096
    name: grpc
  selector:
    app: loki
---
# Loki Storage PVC
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: loki-storage-pvc
  namespace: monitoring
spec:
  accessModes:
  - ReadWriteOnce
  storageClassName: standard
  resources:
    requests:
      storage: 50Gi